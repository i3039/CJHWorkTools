using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CJH.Common
{
    /// <summary>
    /// 随机姓名生成类
    /// </summary>
    public class RandomNames
    {
        #region 姓、名字符集
        /// <summary>
        /// 姓
        /// </summary>
        static string[] _firstName = new string[]{  
                    "白","毕","卞","蔡","曹","岑","常","车","陈","成" ,"程","池","邓","丁","范","方","樊","费","冯","符"
                   ,"傅","甘","高","葛","龚","古","关","郭","韩","何" ,"贺","洪","侯","胡","华","黄","霍","江"
                   ,"姜","蒋","金","康","柯","孔","赖","郎","乐","雷" ,"黎","李","连","廉","梁","廖","林","凌","刘","柳"
                   ,"龙","卢","鲁","陆","路","吕","罗","骆","马","梅" ,"孟","莫","母","穆","倪","宁","欧","区","潘","彭"
                   ,"蒲","皮","齐","戚","钱","强","秦","丘","邱","饶" ,"任","沈","盛","施","石","时","史","司徒","苏","孙"
                   ,"谭","汤","唐","陶","田","童","涂","王","危","韦" ,"卫","魏","温","文","翁","巫","邬","吴","伍","武"
                   ,"席","夏","萧","谢","辛","邢","徐","许","薛","严" ,"颜","杨","叶","易","殷","尤","于","余","俞","虞"
                   ,"元","袁","岳","云","曾","詹","张","章","赵","郑" ,"钟","周","邹","朱","褚","庄","卓" };

        /// <summary>
        /// 单字名
        /// </summary>
        static string[] _lastName1 = new string[] { "超", "元", "涵", "杰", "海", "中", "朝", "戌", "卫", "妘", "园", "恩", "水", "龙", "储", "九", "传", "珏", "凯", "砾", "华", "锋", "则", "琪", "守", "皙", "富", "忻", "玉", "金", "哲", "铭", "梓", "楷", "邵", "勇", "袖", "展", "桠", "含", "语", "抒", "宇", "又", "棣", "唯", "宏", "艾", "伟", "思", "泸", "学", "文", "泓", "瑞", "耀", "靓", "瓒", "世", "震", "泽", "喜", "兆", "大", "蛋", "起", "霏", "克", "诗", "佐", "禄", "洋", "连", "尧", "制", "赫", "一", "铄", "炳", "仙", "栩", "佩", "长", "嵩", "星", "心", "无", "韵", "还", "宣", "靖", "铮", "钦", "易", "祥", "恬", "凌", "振", "宸", "之", "以", "晶", "濠", "歆", "尔", "高", "涌", "方", "天", "彦", "清", "桥", "明", "泺", "杏", "博", "宁", "妞", "恒", "少", "锐", "钱", "林", "赏", "永", "祺", "际", "蘅", "燎", "悦", "兴", "豪", "满", "民", "晓", "荣", "乾", "野", "生", "乙", "滋", "雨", "风", "义", "航", "升", "旗", "加", "忠", "鹏", "晗", "鄢", "立", "广", "融", "芷", "杭", "同", "扬", "萧", "如", "子", "笑", "志", "拥", "苓", "森", "芯", "麟", "卿", "嘉", "修", "景", "英", "齐", "伯", "飞", "战", "峻", "盛", "顺", "启", "全", "礼", "冠", "定", "霖", "煦", "建", "校", "秋", "化", "童", "怡", "显", "臣", "李", "颐", "贵", "翰", "轩", "苇", "洙", "裕", "增", "汇", "剑", "源", "三", "鲁", "玮", "登", "公", "许", "祯", "人", "新", "道", "沛", "希", "彰", "合", "绿", "鑫", "颂", "红", "临", "觉", "岍", "凡", "达", "杜", "席", "延", "勤", "堂", "春", "帅", "昊", "崇", "斯", "柏", "浩", "朋", "戴", "悠", "峰", "慧", "斌", "棱", "萱", "俏", "东", "益", "丁", "德", "省", "国", "效", "孜", "甬", "致", "湘", "意", "张", "政", "川", "坚", "蔚", "玖", "刚", "其", "俊", "有", "梧", "成", "昭", "坭", "绍", "喻", "协", "开", "收", "槿", "毓", "匀", "舜", "宜", "杨", "云", "葛", "进", "函", "城", "执", "羽", "劭", "平", "纯", "岳", "厚", "久", "汝", "晨", "雄", "佳", "格", "昆", "耕", "皇", "响", "宝", "芝", "骏", "郁", "茹", "小", "叶", "桅", "涛", "未", "诚", "灏", "禹", "侠", "于", "厅", "晖", "窈", "桎", "煜", "悟", "刀", "瑷", "翔", "杵", "军", "旭", "聪", "任", "幼", "奇", "闻", "夕", "鸣", "贻", "安", "极", "圣", "赛", "丞", "书", "西", "栌", "奕", "淼", "楚", "家", "木", "悉", "谣", "瀚", "阳", "权", "桢", "狗", "爰", "正", "坤", "钰", "霆", "丙", "秀", "桦", "馨", "硕", "皓", "绘", "勋", "烨", "寒", "偲", "能", "尘", "棒", "晟", "强", "忆", "仁", "旌", "勉", "北", "淳", "芊", "谦", "昂", "继", "彬", "盟", "亦", "承", "偌", "亮", "秦", "智", "睿", "稚", "姊", "集", "录", "盐", "树", "雅", "珈", "材", "骅", "勰", "檀", "山", "澎", "紫", "玛", "虞", "楸", "呈", "枫", "青", "辉", "麓", "冲", "跃", "江", "丛", "行", "辰", "顾", "岭", "珠", "廷", "十", "才", "於", "群", "健", "蛟", "胜", "骢", "莼", "众", "傲", "科", "甲", "周", "马", "来", "殷", "佑", "孝", "朦", "镧", "雯", "磊", "颖", "茂", "喧", "可", "陈", "统", "兮", "镇", "赐", "慈", "士", "浴", "远", "予", "卓", "章", "添", "柱", "君", "铎", "珧", "菲", "若", "月", "彤", "旋", "倬", "译", "垚", "兰", "莆", "湛", "翊", "庆", "遇", "虔", "灿", "保", "丹", "望", "骋", "南", "黄", "音", "辛", "蓝", "琦", "宗", "茄", "松", "光", "衣", "仕", "洳", "熙", "康", "梁", "旺", "贤", "韬", "绣", "芩", "贯", "菀", "泰", "虎", "释", "欣", "渲", "蕙", "璐", "员", "良", "乐", "力", "翎", "示", "恺", "依", "知", "具", "隽", "果", "竞", "岱", "薪", "舟", "伊", "昕", "毅", "召", "照", "向", "耘", "宴", "咏", "宽", "杉", "岽", "涴", "鸿", "坡", "锡", "述", "骥", "吉", "缪", "祖", "枝", "充", "欧", "钥", "泳", "煌", "誉", "步", "洪", "凤", "栋", "已", "籍", "驰", "嫦", "仲", "颍", "约", "福", "宙", "瑛", "诺", "钊", "骄", "功", "颜", "百", "河", "兑", "饶", "邦", "沐", "和", "沁", "然", "鹃", "润", "蓉", "轶", "仓", "存", "蓁", "纬", "沄", "帆", "泉", "尚", "必", "钫", "舒", "藩", "京", "隆", "炜", "珉", "韦", "为", "植", "昱", "墨", "策", "洵", "本", "晏", "迈", "财", "祈", "赞", "雾", "前", "亨", "放", "运", "庭", "鹦", "烜", "潮", "维", "嘟", "企", "初", "鸳", "澄", "映", "时", "印", "雷", "作", "讲", "威", "丰", "娟", "巧", "美", "娜", "静", "淑", "惠", "翠", "萍", "娥", "玲", "芬", "芳", "燕", "彩", "菊", "洁", "梅", "琳", "素", "莲", "真", "环", "雪", "爱", "妹", "霞", "香", "莺", "媛", "艳", "波", "发", "武", "利", "信", "昌", "岩", "彪", "先", "敬", "壮", "会", "善", "友", "琼", "珍", "贞", "莉", "桂", "固", "轮", "朗", "言", "伦", "炎", "琛", "钧", "腾", "楠", "榕", "弘", "白", "赤", "娣", "璧", "娅", "妍", "茜", "珊", "凉", "谙", "仪", "遐", "翚", "桓", "鸠", "笛", "古", "晴", "莎", "锦", "黛", "倩", "婷", "姣", "婉", "娴", "瑾", "溢", "澜", "恭", "劲", "冀", "零", "落", "千", "弼", "缘", "逸", "宥", "碧", "空", "虹", "灵", "辅", "让", "露", "瑶", "婵", "雁", "蓓", "纨", "荷", "眉", "瑗", "琰", "艺", "冰", "爽", "琬", "茗", "攸", "讳", "曦", "弦", "嗣", "啸", "潜", "炼", "万", "咎", "不", "疑", "复", "鸢", "戾", "申", "休", "玄", "汤", "岚", "邃", "鲲", "飘", "育", "滢", "馥", "筠", "柔", "竹", "霭", "凝", "鱼", "欢", "霄", "谅", "朔", "琴", "蕊", "薇", "菁", "梦", "苑", "婕", "逍", "遥", "涯", "焕", "程", "匡", "芸", "亚", "姬", "影", "荔", "丽" };

        /// <summary>
        /// 双字名
        /// </summary>
        static string[] _lastName2 = new string[] { "超元", "涵杰", "海中", "朝戌", "卫妘", "园恩", "水龙", "储九", "传珏", "凯砾", "华锋", "则琪", "守皙", "富忻", "玉金", "哲铭", "梓楷", "邵勇", "袖展", "桠含", "梓语", "抒宇", "又棣", "唯宏", "艾伟", "思泸", "学文", "泓瑞", "耀靓", "思瓒", "世震", "泽喜", "兆中", "大蛋", "起霏", "克诗", "泽佐", "禄洋", "连尧", "制赫", "一铄", "炳仙", "栩佩", "长嵩", "星心", "无韵", "还宣", "靖铮", "钦易", "仙祥", "恬凌", "振宸", "之以", "晶濠", "歆尔", "高涌", "方天", "彦清", "恩桥", "高明", "泺杏", "宇博", "连宁", "宇妞", "韵恒", "少锐", "钱林", "泽赏", "永祺", "际蘅", "燎龙", "悦兴", "宁豪", "满民", "晓荣", "瑞乾", "野生", "中乙", "滋雨", "佩心", "风豪", "义航", "林升", "博旗", "加忠", "宏鹏", "航铭", "晗鄢", "立之", "广融", "芷杭", "同扬", "萧天", "如生", "子笑", "志拥", "苓森", "芯麟", "卿洋", "嘉修", "景英", "齐喜", "伯杰", "飞锋", "战铭", "晓峻", "盛顺", "启全", "杵军", "致旭", "旭聪", "任峰", "幼梓", "登张", "奇兴", "闻云", "歆华", "夕鸣", "贻杰", "安极", "圣德", "赛锐", "丞如", "小书", "玉西", "瑞栌", "奕淼", "德楚", "家木", "景悉", "荣佐", "新谣", "瀚阳", "舜权", "桢三", "狗麟", "爰正", "杭坤", "钰霆", "丙春", "丙秀", "嘉桦", "楷馨", "觉硕", "久皓", "绘勋", "永中", "烨宁", "寒兆", "方文", "偲华", "文能", "佳尘", "棒宇", "振金", "柏晟", "晗强", "忆扬", "仁恬", "旌伟", "浩勉", "北淳", "芊谦", "显昂", "继仁", "彬盟", "亦承", "偌亮", "佳宏", "秦洋", "飞嘉", "智睿", "稚鑫", "姊斌", "集佳", "录扬", "进洋", "玉盐", "彬树", "雅恬", "祺珈", "慧材", "骅勰", "海檀", "玉裕", "山霖", "子恒", "以伟", "梓澎", "紫刚", "晓忻", "玛虞", "楸希", "呈枫", "青辉", "麓华", "旭羽", "凡冲", "同玮", "志瀚", "跃江", "文杨", "心修", "馨丛", "泽行", "涵辰", "靖彬", "钦顾", "乙博", "增岭", "展飞", "益珠", "嘉成", "廷十", "笑才", "泽秋", "一安", "明恒", "愿云", "永萍", "久合", "润贞", "一升", "靖培", "冠颐", "乐凡", "霞佳", "佳苇", "尧瑜", "芝舒", "俐丹", "茨涵", "露清", "薪娜", "孟彤", "颖珺", "骐芳", "惠昭", "伊敏", "虹子", "耀慧", "仙静", "艺娟", "觅玲", "巍仪", "洛娟", "月烨", "瑶常", "申果", "迎凡", "风征", "梦瑞", "润原", "橙寻", "苏琴", "佑灵", "东匀", "尚婷", "苡霞", "绎木", "景娥", "关霖", "钰宇", "思珑", "岚然", "悠环", "元如", "锦桦", "炅莉", "镕曼", "四姿", "梦迷", "会蓓", "寻露", "夏羚", "骁燕", "连纯", "琳安", "燕硕", "彩前", "佩博", "莹璇", "亚惜", "毅懿", "右颖", "英娟", "灿愚", "潇岚", "婷娴", "常语", "誉梅", "姿旨", "亦晴", "美文", "梓许", "潭东", "曦瑛", "建蔚", "璐宁", "斯一", "苹心", "逍瑜", "芸严", "千烈", "舒丛", "津杉", "浩苏", "智元", "宗淼", "慧永", "贤凤", "晓波", "神琴", "庆沐", "溪堡", "玉姣", "炜涵", "雪茜", "潞羽", "铄媛", "了泯", "芝佳", "慧芸", "慧岐", "其军", "祺轩", "润岳", "壬荣", "珂齐", "自泰", "佳豪", "津锋", "福月", "峻冰", "烜东", "森立", "悦楠", "友宏", "镜良", "维齐", "奥宸", "书涛", "伍东", "飘鑫", "琳杼", "钰宇", "臆佐", "大含", "晶红", "键涵", "初航", "恺芮", "宝炳", "豫隆", "舜辰", "耀珅", "凡玺", "咭桃", "柏嵘", "如何", "保昌", "佩通", "聿缤", "芮澜", "南会", "叶佑", "光冰", "佑运", "骥军", "玉乙", "春琪", "遵德", "晋达", "心子", "城云", "迅其", "春睿", "嘉环", "歧睿", "大希", "太利", "可窈", "鸿弋", "建培", "秀洋", "迎洲", "祺仁", "结力", "安良", "中翊", "永鉴", "炳侃", "行丰", "明能", "俊缘", "翼倪", "士祎", "嘉善", "野培", "年之", "峻蔹", "健乾", "城江", "霁扬", "黎丝", "坤桐", "文坤", "柏源", "菡行", "小磬", "永豆", "春尉", "台然", "桃旺", "韵云", "乃铭", "远桂", "稚韩", "福彬", "飞杰", "秀好", "高宁", "郝乐", "艺忱", "初松", "容焙", "兆月", "建捷", "泱苇", "岳诚", "曙赫", "金叶", "艺超", "菱梓", "琰雯", "瑷铄", "蒲洋", "兰源", "非雨", "伟藤", "苗宇", "汤泽", "平峰", "晓朵", "莹安", "苇兰", "坤洋", "振惠", "佳蚕", "馨晨", "涵容", "依涓", "竺霞", "俊嫔", "思精", "浩雯", "亚煌", "韵阳", "烨华", "红雪", "宇毅", "婧花", "爱亚", "洪峰", "丽冠", "咏蓬", "司仪", "芝翔", "夏珑", "麒芳", "予夏", "言哲", "靓燕", "仟曦", "微宇", "心雪", "婕睿", "庆姝", "岚茗", "琛杰", "紫舜", "静思", "芷晴", "福华", "皖斯", "水蓉", "笑凡", "泓木", "海红", "疏菁", "叶荣", "川羽", "思流", "云群", "艺雩", "沧前", "蕾扬", "璐全", "昊雅", "睿艾", "宗郡", "从卉", "泽姿", "无美", "惠宇", "悦名", "胖根", "伟婵", "雯玉", "悦园", "天越", "钥艺", "丁雅", "锦诺", "迎泽", "普茵", "录佳", "子淇", "素花", "舟婷", "娟婷", "馨倩", "梦珏", "心雯", "蓉楠", "露含", "彩菲", "润妮", "雯轩", "旭含", "维潭", "馨孜", "雁锘", "亿琳", "晴宇", "静平", "月雁", "烘诗", "家绵", "盈玲", "红勤", "麓媛", "睿童", "菲夕", "皓十", "浚辉", "柳阳", "咏菲", "夕羽", "宇恩", "伟瑞", "希元", "稀芊", "以彤", "菲珊", "红菲", "苍佳", "晨均", "汝嫣", "馨謦", "尔风", "琼先", "云舒", "群美", "菁瑜", "朝慧", "岑丽", "子坛", "瑞夜", "逸晶", "烁天", "湘艳", "海磊", "力菲", "鹤浠", "会邝", "秋运", "越元", "希雅", "舜潼", "艺翱", "司帅", "雪蓁", "静枫", "艳炜", "一琏", "可溪", "伟洳", "筱烨", "铜弘", "固蓉", "镔婷", "千今", "淑浚", "笠辉", "乙兰", "濒轩", "惠溪", "温芳", "奉语", "辅伟", "铭希", "雯吕", "宏藜", "紫沛", "永明", "慧柠", "行平", "明芝", "文侠", "澈妙", "韶萍", "娅琛", "栎凝", "爱华", "曼婕", "笑豫", "向玲", "昱桐", "新妤", "培童", "南平", "洁梅", "晶柔", "丛珊", "依舒", "霞阳", "枝新", "致涵", "梓琳", "含路", "美木", "树瑾", "家聆", "炎梅", "玲玮", "栩佳", "禹馨", "佳煊", "禧洁", "治玲", "丽昀", "男菡", "逸为", "珈儇", "湘宇", "方仁", "芳岩", "锦真", "丰磊", "怿杨", "兹友", "进锐", "桂康", "业峰", "炜锋", "再源", "海明", "沛宏", "添皓", "威凯", "星义", "俏杼", "修曦", "呈飞", "乐东", "楷席", "俊山", "银祺", "韬纯", "尚满", "彬友", "绎伟", "警艺", "淦甄", "东安", "昭民", "咏麟", "润勋", "岑熹", "聚斐", "健高", "盖熙", "雍萱", "蔓乔", "泓吉", "来健", "懋龙", "锦棋", "青东", "正权", "采尚", "宗才", "冠甲", "伊才", "幸涵", "晓源", "燃源", "嫣飞", "杰云", "得督", "思柔", "坤永", "战安", "雅斌", "太福", "思裕", "虎才", "尚杰", "浩年", "十泉", "博因", "晨章", "一均", "之极", "正阳", "为渊", "城博", "粉涛", "萌灯", "维纤", "翰全", "容利", "翰赫", "朝洪", "宏哲", "赜杭", "弋江", "子续", "建四", "孑棋", "秉钰", "明亮", "百流", "鲸成", "惠刚", "馨强", "生然", "家隆", "青润", "言宏", "睿发", "到文", "锈阳", "定宝", "哲湘", "峻锋", "成同", "晓耀", "三冉", "瑷铭", "敬煜", "会观", "先毅", "亚明", "绍翔" };

        #endregion

        #region 随机生成姓名

        /// <summary>
        /// 随机生成单名的姓名
        /// </summary>
        /// <returns></returns>
        public static string GetSingleName()
        {
            //姓
            int[] firstNameIndex = getRandomNum(1, 1, _firstName.Length);

            //名
            int[] lastNameIndex = getRandomNum(1, 1, _lastName1.Length);

            //姓名组合
            string name = _firstName[firstNameIndex[0]] + "" + _lastName1[lastNameIndex[0]];

            return name;
        }

        /// <summary>
        /// 随机生成双名的姓名
        /// </summary>
        /// <returns></returns>
        public static string GetDoubleName()
        {
            //姓
            int[] firstNameIndex = getRandomNum(1, 1, _firstName.Length);

            //名
            int[] lastNameIndex = getRandomNum(1, 1, _lastName2.Length);

            //姓名组合
            string name = _firstName[firstNameIndex[0]] + "" + _lastName2[lastNameIndex[0]];

            return name;
        }

        /// <summary>
        /// 随机生成双名姓名集
        /// </summary>
        /// <param name="pages">页数</param>
        /// <param name="count">个数</param>
        /// <returns></returns>
        public static List<string> GetNames(int pages, int count)
        {
            int nameCount = (pages > 0) ? pages * 10 : count;

            //姓
            int[] firstNameIndex = getRandomNum(nameCount, 1, _firstName.Length);

            //名
            int[] lastNameIndex = getRandomNum(nameCount, 1, _lastName2.Length);

            //姓名组合
            List<string> names = new List<string>();
            string name = "";
            for (int i = 0; i < nameCount; i++)
            {
                name = _firstName[firstNameIndex[i]] + "" + _lastName2[lastNameIndex[i]];
                names.Add(name);
            }

            return names;
        }

        /// <summary>
        /// 随机生成单名姓名集
        /// </summary>
        /// <param name="pages"></param>
        /// <param name="count"></param>
        /// <returns></returns>
        public static List<string> GetRepairNames(int pages, int count)
        {
            int nameCount = (pages > 0) ? pages * 10 : count;

            //姓
            int[] firstNameIndex = getRandomNum(nameCount, 1, _firstName.Length);

            //名
            int[] lastNameIndex = getRandomNum(nameCount, 1, _lastName1.Length);

            //姓名组合
            List<string> names = new List<string>();
            string name = "";
            for (int i = 0; i < nameCount; i++)
            {
                name = _firstName[firstNameIndex[i]] + "" + _lastName1[lastNameIndex[i]];
                names.Add(name);
            }

            return names;
        }

        #endregion

        #region 随机数
        /// <summary>
        /// 获取互不相同的随机数
        /// </summary>
        /// <param name="num">随机数个数</param>
        /// <param name="minValue">随机数起始数</param>
        /// <param name="maxValue">随机数结束数</param>
        /// <returns></returns>
        public static int[] getRandomNum(int num, int minValue, int maxValue)
        {
            Random ra = new Random(unchecked((int)DateTime.Now.Ticks));
            int[] arrNum = new int[num];
            int tmp = 0;
            for (int i = 0; i <= num - 1; i++)
            {
                tmp = ra.Next(minValue, maxValue); //随机取数
                arrNum[i] = getNum(arrNum, tmp, minValue, maxValue, ra); //取出值赋到数组中
            }
            return arrNum;
        }
        /// <summary>
        /// 递归检测生成的随机数是否有重复
        /// </summary>
        /// <param name="arrNum"></param>
        /// <param name="tmp"></param>
        /// <param name="minValue"></param>
        /// <param name="maxValue"></param>
        /// <param name="ra"></param>
        /// <returns></returns>
        public static int getNum(int[] arrNum, int tmp, int minValue, int maxValue, Random ra)
        {
            int n = 0;
            while (n <= arrNum.Length - 1)
            {
                if (arrNum[n] == tmp) //利用循环判断是否有重复
                {
                    tmp = ra.Next(minValue, maxValue); //重新随机获取。
                    getNum(arrNum, tmp, minValue, maxValue, ra);//递归:如果取出来的数字和已取得的数字有重复就重新随机获取。
                }
                n++;
            }
            return tmp;
        }
        #endregion
    }
}
